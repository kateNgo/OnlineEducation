using iTextSharp.text;
using iTextSharp.text.html.simpleparser;
using iTextSharp.text.pdf;
using iTextSharp.tool.xml;
using OnlineEducation.Areas.HelpOnline.Models;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Drawing.Printing;
using System.IO;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;


namespace OnlineEducation.Areas.HelpOnline.Controllers
{
    public class Level3Controller : Controller
    {
        private HelpLevel3DB helpLevel3DB = new HelpLevel3DB();
        // GET: HelpOnline/Level3
        public ActionResult Index(int? Id)
        {
            int level1Id = 0;
            List<HelpLevel3> list = new List<HelpLevel3>();
            if (Id == null)
            {
                list = helpLevel3DB.ListAll();
            }
            else
            {
                list = helpLevel3DB.LoadHelpLevel3ByParentId(Id.Value);
            }
            level1Id = Convert.ToInt32(TempData["level1Id"]);
            ViewBag.level1Id = level1Id;
            ViewBag.HtmlPath =  ConfigurationManager.AppSettings["HelpOnlineHTMLPath"].ToString();
            
            return View(list);
        }
        public ActionResult SendEmailContent(string source)
        {
            return RedirectToAction("Index");
        }
        public ActionResult PrintContent(int id)
        {
            HelpLevel3 helpLevel3 = helpLevel3DB.GetHelpLevel3ById(id);
            if (helpLevel3 == null)
            {
                ViewBag.ErrorMessage = "Can not find this recource";
                return RedirectToAction("Index");
            }
            SelectPdf.HtmlToPdf converter = new SelectPdf.HtmlToPdf();
            string url = ConfigurationManager.AppSettings["HelpOnlineHTMLPath"].ToString() + helpLevel3.URL;
            WebClient client = new WebClient();
            String htmlCode = client.DownloadString(Server.MapPath(url));
            SelectPdf.PdfDocument doc = converter.ConvertHtmlString(htmlCode);
            string fileToSave = ConfigurationManager.AppSettings["HelpOnlineHTMLPath"].ToString();

            fileToSave += "Download.pdf";
            fileToSave = Server.MapPath(fileToSave);
            doc.Save(fileToSave);
            doc.Close();
            byte[] FileBytes = System.IO.File.ReadAllBytes(fileToSave);
            return File(FileBytes, "application/pdf");

            

        }
        public ActionResult ToPDFContent(int id)
        {
            HelpLevel3 helpLevel3 = helpLevel3DB.GetHelpLevel3ById(id);
            if (helpLevel3 == null)
            {
                ViewBag.ErrorMessage = "Can not find this recource";
                return RedirectToAction("Index");
            }
            string url = ConfigurationManager.AppSettings["HelpOnlineHTMLPath"].ToString() + helpLevel3.URL;
            WebClient client = new WebClient();
            String htmlCode = client.DownloadString(Server.MapPath(url));
            using (MemoryStream stream = new System.IO.MemoryStream())
            {
                

                StringReader sr = new StringReader(htmlCode);
                Document pdfDoc = new Document(PageSize.A4, 10f, 10f, 100f, 0f);
                HTMLWorker htmlparser = new HTMLWorker(pdfDoc);
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, stream);
                pdfDoc.Open();
                htmlparser.Parse(sr);
                pdfDoc.Close();
                byte[] bytes = stream.ToArray();
                Response.ContentType = "application/pdf";
                // Adds an HTTP header to the output stream
                Response.AddHeader("Content-Disposition", "attachment; filename=Download.pdf");
                //Gets or sets a value indicating whether to buffer output and send it after
                // the complete response is finished processing.
                Response.Buffer = true;
                // Sets the Cache-Control header to one of the values of System.Web.HttpCacheability.
                Response.Cache.SetCacheability(HttpCacheability.NoCache);
                // Writes a string of binary characters to the HTTP output stream. it write the generated bytes .
                Response.BinaryWrite(bytes);
                // Sends all currently buffered output to the client, stops execution of the
                // page, and raises the System.Web.HttpApplication.EndRequest event.

                Response.End();
                // Closes the socket connection to a client. it is a necessary step as you must close the response after doing work.its best approach.
                Response.Close();
            }

            return RedirectToAction("Index");
        }
        public ActionResult EmailContent(string source)
        {
            return RedirectToAction("Index");
        }
    }
}